---
import type { GetStaticPaths } from "astro";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import Layout from "@/layouts/Base.astro";
import Article from "@/components/diary/Article.astro";
import PostNavigation from "@/components/common/PostNavigation.astro";
import Breadcrumb from "@/components/common/Breadcrumb.astro";
import { ui, defaultLang } from "@/i18n/ui";
import { getPostNavigation } from "@/lib/collections/navigation";

function useTranslation(langCode: string) {
    return function t(key: keyof typeof ui[typeof defaultLang]) {
        return ui[langCode as keyof typeof ui]?.[key] || ui[defaultLang][key];
    };
}

const t = useTranslation("ja");

interface Props {
    singleBlog: CollectionEntry<"diary">;
}

export const getStaticPaths: GetStaticPaths = async () => {
    const allBlogs = await getCollection("diary");
    const pathData = allBlogs.map((singleBlog) => ({
        params: {
            slug: singleBlog.data.date.toISOString().slice(0, 10),
        },
        props: {
            singleBlog: singleBlog,
        },
    }));
    return pathData;
};

const { singleBlog } = Astro.props;
const { Content, headings } = await singleBlog.render();
const allDiaries = await getCollection("diary");
const { prevPost, nextPost } = getPostNavigation(singleBlog, allDiaries);

const breadcrumbItems = [
    {
        text: t("breadcrumb.diary"),
        href: "/diary",
    },
    {
        text: singleBlog.data.title,
    },
];
---

<Layout
    title=`${singleBlog.data.title} - Scriptone`
    }
    description={singleBlog.data.description}
>
    <Breadcrumb items={breadcrumbItems} langCode="ja" />
    
    <Article
        Content={Content}
        headings={headings}
        singleBlog={singleBlog}
    />
    
    <PostNavigation
        prevPost={prevPost}
        nextPost={nextPost}
        langCode="ja"
        baseUrl="/diary"
    />
    
    <div class="mt-8"><a href="/diary">&lt; Diary一覧に戻る</a></div>
</Layout>

<style>
    a {
        text-decoration: underline;
    }
</style>
