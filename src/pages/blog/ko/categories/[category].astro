---
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import Layout from "@/layouts/Base.astro";
import BlogList from "@/components/blog/BlogList.astro";
import BlogAggregationLists from "@/components/blog/BlogAggregationLists.astro";

export async function getStaticPaths() {
    const allBlogPosts: CollectionEntry<"blog_ko">[] =
        await getCollection("blog_ko");
    const uniqueCategories = Array.from(
        new Set(allBlogPosts.flatMap((post) => post.data.categories || []))
    );
    return uniqueCategories.map((category) => ({
        params: { category },
    }));
}

const { category } = Astro.params;
const allBlogPosts: CollectionEntry<"blog_ko">[] =
    await getCollection("blog_ko");
const filteredPosts = allBlogPosts.filter((post) =>
    post.data.categories?.includes(category)
);
---

<Layout title={`카테고리: ${category} - Scriptone`}>
    <h2 class="text-3xl font-bold mb-4">카테고리: {category}</h2>
    {
        filteredPosts.length > 0 ? (
            <BlogList posts={filteredPosts} langCode="ko" />
        ) : (
            <p>이 카테고리에는 게시물이 없습니다.</p>
        )
    }

    <BlogAggregationLists
        allBlogPosts={allBlogPosts}
        langCode="ko"
        archiveLabel="아카이브"
        categoryLabel="카테고리"
        tagLabel="태그"
    />
</Layout>
