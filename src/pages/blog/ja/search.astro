---
import { getCollection } from "astro:content";
import Layout from "@/layouts/Base.astro";
import Breadcrumb from "@/components/common/Breadcrumb.astro";
import { ui, defaultLang } from "@/i18n/ui";

function useTranslation(langCode: string) {
    return function t(key: keyof typeof ui[typeof defaultLang]) {
        return ui[langCode as keyof typeof ui]?.[key] || ui[defaultLang][key];
    };
}

const t = useTranslation("ja");

// ブログ記事を取得（クライアントサイド検索用）
const allPosts = await getCollection("blog_ja");

const breadcrumbItems = [
    {
        text: t("breadcrumb.blog"),
        href: "/blog/ja",
    },
    {
        text: t("search.title"),
    },
];
---

<Layout title={`${t("search.title")} - Scriptone`}>
    <Breadcrumb items={breadcrumbItems} langCode="ja" />
    
    <div class="max-w-4xl mx-auto">
        <h1 class="text-3xl font-bold mb-6">{t("search.title")}</h1>
        
        <div class="mb-6">
            <input 
                type="text" 
                id="search-input"
                placeholder={t("search.placeholder")}
                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
        </div>
        
        <div id="search-results" class="hidden">
            <h2 class="text-xl font-semibold mb-4">{t("search.results")}</h2>
            <ul id="results-container" class="space-y-4"></ul>
        </div>
        
        <div id="no-results" class="hidden text-gray-600">
            {t("search.noResults")}
        </div>
    </div>
</Layout>

<script define:vars={{ allPosts, t: {
    "search.results": t("search.results"),
    "search.noResults": t("search.noResults")
} }}>
    const searchInput = document.getElementById('search-input');
    const searchResults = document.getElementById('search-results');
    const noResults = document.getElementById('no-results');
    const resultsContainer = document.getElementById('results-container');
    
    function searchPosts(posts, query) {
        if (!query.trim()) return [];
        
        const normalizedQuery = query.toLowerCase().trim();
        const results = [];
        
        posts.forEach(post => {
            let score = 0;
            const title = post.data.title.toLowerCase();
            const description = (post.data.description || '').toLowerCase();
            const tags = (post.data.tags || []).map(tag => tag.toLowerCase());
            const categories = (post.data.categories || []).map(cat => cat.toLowerCase());
            
            // タイトルマッチ（最高点）
            if (title.includes(normalizedQuery)) score += 10;
            
            // 説明マッチ
            if (description.includes(normalizedQuery)) score += 5;
            
            // タグマッチ
            if (tags.some(tag => tag.includes(normalizedQuery))) score += 3;
            
            // カテゴリーマッチ
            if (categories.some(cat => cat.includes(normalizedQuery))) score += 2;
            
            if (score > 0) {
                results.push({ post, score });
            }
        });
        
        return results.sort((a, b) => b.score - a.score).slice(0, 50);
    }
    
    function displayResults(results, query) {
        if (results.length === 0) {
            searchResults.classList.add('hidden');
            noResults.classList.remove('hidden');
            return;
        }
        
        noResults.classList.add('hidden');
        searchResults.classList.remove('hidden');
        
        resultsContainer.innerHTML = results.map(({ post }) => {
            const formatDate = (dateStr) => {
                if (!dateStr) return '';
                const date = new Date(dateStr);
                if (isNaN(date.getTime())) return '';
                return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
            };
            
            return `
                <li class="flex border-0 rounded-lg p-0 overflow-hidden shadow-sm bg-gradient-to-r from-[var(--bg1)] to-[var(--bg2)] mb-4">
                    <div class="flex-1 p-4">
                        <h3 class="text-lg font-bold mb-2">
                            <a href="/blog/ja/${post.slug}" class="text-[var(--accent7)] hover:text-[var(--accent3)] transition-colors duration-300">
                                ${post.data.title}
                            </a>
                        </h3>
                        ${post.data.description ? `<p class="text-gray-600 mb-3 text-sm">${post.data.description}</p>` : ''}
                        <div class="text-sm text-gray-600 flex flex-wrap gap-1 my-3">
                            ${(post.data.categories || []).map(cat => 
                                `<a href="/blog/ja/categories/${cat}" class="inline-flex items-center px-1 py-0.5 rounded bg-[var(--accent3)]/90 hover:bg-[var(--accent3)]/75 text-white text-xs font-semibold duration-300">
                                    <i class="material-icons mr-1 text-white" style="font-size: 14px !important; transform: scale(0.9); vertical-align: middle;">folder</i>
                                    ${cat}
                                </a>`
                            ).join('')}
                            ${(post.data.tags || []).map(tag => 
                                `<a href="/blog/ja/tags/${tag}" class="inline-flex items-center px-1 pl-0.5 pr-1.5 rounded bg-[var(--accent3)]/15 text-[var(--accent7)] hover:bg-[var(--accent3)]/35 hover:text-[var(--accent7)] text-xs font-medium transition-colors duration-300">
                                    <i class="material-icons mr-1 text-[var(--accent7)]" style="font-size: 14px !important; transform: scale(0.9); vertical-align: middle;">local_offer</i>
                                    ${tag}
                                </a>`
                            ).join('')}
                        </div>
                        ${post.data.date ? `
                            <div class="text-sm text-gray-600 mt-1 flex items-center">
                                <i class="material-icons mr-1" style="font-size: 14px !important; transform: scale(0.9); vertical-align: middle;">schedule</i>
                                ${formatDate(post.data.date)}
                            </div>
                        ` : ''}
                    </div>
                    ${post.data.preview ? `
                        <div class="flex-shrink-0 preview-image">
                            <img src="${post.data.preview}" alt="${post.data.title}" class="w-32 h-full object-cover">
                        </div>
                    ` : ''}
                </li>
            `;
        }).join('');
    }
    
    searchInput.addEventListener('input', (e) => {
        const query = e.target.value;
        const results = searchPosts(allPosts, query);
        displayResults(results, query);
    });
    
    // URLからクエリパラメータを読み取り
    const urlParams = new URLSearchParams(window.location.search);
    const initialQuery = urlParams.get('q') || '';
    if (initialQuery) {
        searchInput.value = initialQuery;
        const results = searchPosts(allPosts, initialQuery);
        displayResults(results, initialQuery);
    }
</script>

<style>
    #results-container .material-icons {
        font-size: 14px !important;
        transform: scale(0.9);
        vertical-align: middle;
    }
    
    #results-container .icon-small {
        font-size: 14px !important;
        transform: scale(0.9);
    }
    
    @media (max-width: 640px) {
        #results-container .preview-image {
            display: none !important;
        }
    }
</style>