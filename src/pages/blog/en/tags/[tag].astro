---
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import { getAggregatedData } from "@/lib/collections/data";
import Layout from "@/layouts/Base.astro";
import BlogList from "@/components/blog/BlogList.astro";
import BlogAggregationLists from "@/components/blog/BlogAggregationLists.astro";
import Pagination from "@/components/common/Pagination.astro";
import { POSTS_PER_PAGE } from "@/lib/constants";

export async function getStaticPaths() {
    const allBlogPosts: CollectionEntry<"blog_en">[] =
        await getCollection("blog_en");
    const { tags } = getAggregatedData(allBlogPosts);
    const uniqueTags = Array.from(new Set(Object.keys(tags)));
    return uniqueTags.map((tag) => ({
        params: { tag },
    }));
}

const { tag } = Astro.params;
const allBlogPosts: CollectionEntry<"blog_en">[] =
    await getCollection("blog_en");
const filteredPosts = allBlogPosts.filter((post) =>
    post.data.tags?.includes(tag)
);

const sortedPosts = filteredPosts.sort((a, b) => {
    const dateA = a.data.date ? a.data.date.getTime() : 0;
    const dateB = b.data.date ? b.data.date.getTime() : 0;
    return dateB - dateA;
});

const postsToShow = sortedPosts.slice(0, POSTS_PER_PAGE);
const totalPages = Math.ceil(sortedPosts.length / POSTS_PER_PAGE);
---

<Layout title={`Tag: ${tag} - Scriptone`}>
    <h2 class="text-3xl font-bold mb-4">Tag: {tag}</h2>
    {
        postsToShow.length > 0 ? (
            <>
                <BlogList posts={postsToShow} langCode="en" />
                <Pagination
                    currentPage={1}
                    totalPages={totalPages}
                    basePath={`/blog/en/tags/${tag}`}
                    langCode="en"
                />
            </>
        ) : (
            <p>No posts found for this tag.</p>
        )
    }

    <BlogAggregationLists
        allBlogPosts={allBlogPosts}
        langCode="en"
        archiveLabel="Archives"
        categoryLabel="Categories"
        tagLabel="Tags"
    />
</Layout>
