---
/**
 * moodeSKy OAuth Callback Page
 * 
 * AT Protocol OAuth 2.0 + DPoP認証コールバック処理
 * RAGから得た公式atproto.dart実装パターンに準拠
 * 
 * @see https://atproto.com/specs/oauth#redirect-based-flow
 * @see https://github.com/myConsciousness/atproto.dart/tree/main/packages/atproto_oauth
 */
import SEOHead from "@/components/seo/SEOHead.astro";

// OAuth 2.0標準クエリパラメータを取得
const url = new URL(Astro.request.url);
const code = url.searchParams.get('code');        // 認証コード
const state = url.searchParams.get('state');      // CSRF保護用
const error = url.searchParams.get('error');      // エラー種類
const error_description = url.searchParams.get('error_description'); // エラー詳細

// Error handling
let statusMessage = '';
let statusType: 'success' | 'error' | 'loading' = 'loading';

if (error) {
    statusType = 'error';
    statusMessage = error_description || `Authentication error: ${error}`;
} else if (code) {
    statusType = 'success';
    statusMessage = 'Authentication completed. Redirecting to app...';
} else {
    statusType = 'error';
    statusMessage = 'Authentication code not found.';
}
---

<!doctype html>
<html lang="en">
    <head>
        <SEOHead
            title="moodeSky OAuth Authentication"
            description="moodeSky OAuth Authentication Callback"
            url="/moodesky/oauth/callback"
            type="website"
        />
    </head>

    <body>
        
        <main class="oauth-callback-main">
            <div class="oauth-callback-container">
                <div class="oauth-callback-card">
                    <div class="oauth-callback-icon">
                        {statusType === 'success' && <i class="material-icons success-icon">check_circle</i>}
                        {statusType === 'error' && <i class="material-icons error-icon">error</i>}
                        {statusType === 'loading' && <i class="material-icons loading-icon">hourglass_empty</i>}
                    </div>
                    
                    <h1 class="oauth-callback-title">moodeSky OAuth Authentication</h1>
                    
                    <div class={`oauth-callback-message ${statusType}`}>
                        <p>{statusMessage}</p>
                    </div>

                    {statusType === 'success' && (
                        <div class="oauth-callback-details">
                            <p class="redirect-message">
                                If the app doesn't open automatically, please open the app manually.
                            </p>
                        </div>
                    )}

                    {statusType === 'error' && (
                        <div class="oauth-callback-actions">
                            <button class="retry-button" onclick="window.history.back()">
                                Go Back
                            </button>
                        </div>
                    )}

                    <!-- 控えめなデバッグボタン（エラー時のみ表示） -->
                    {statusType === 'error' && (
                        <div class="debug-corner">
                            <button class="debug-corner-button" onclick="toggleDebugInfo()" title="Show technical details">
                                <span class="debug-icon">🔍</span>
                                <span class="debug-text">Debug</span>
                            </button>
                        </div>
                    )}

                    <!-- デバッグ情報パネル -->
                    <div id="debug-panel" class="debug-panel" style="display: none;">
                        <div class="debug-content">
                            <button class="debug-close" onclick="toggleDebugInfo()" title="Close debug panel">×</button>
                            <div class="debug-header">
                                <h3>🔍 OAuth Debug Information</h3>
                                <p>認証プロセスの詳細情報（セキュリティ情報は除外）</p>
                            </div>
                            <div class="debug-section">
                                <h4>📋 Request Parameters</h4>
                                <div class="debug-item">
                                    <span class="debug-label">Error Type:</span>
                                    <span class="debug-value" id="debug-error-type">{error || 'None'}</span>
                                </div>
                                <div class="debug-item">
                                    <span class="debug-label">Error Description:</span>
                                    <span class="debug-value" id="debug-error-desc">{error_description || 'None'}</span>
                                </div>
                                <div class="debug-item">
                                    <span class="debug-label">Has Authorization Code:</span>
                                    <span class="debug-value" id="debug-has-code">{code ? 'Yes' : 'No'}</span>
                                </div>
                                <div class="debug-item">
                                    <span class="debug-label">Has State Parameter:</span>
                                    <span class="debug-value" id="debug-has-state">{state ? 'Yes' : 'No'}</span>
                                </div>
                            </div>
                            
                            <div class="debug-section">
                                <h4>🌐 Network Information</h4>
                                <div class="debug-item">
                                    <span class="debug-label">Callback URL:</span>
                                    <span class="debug-value" id="debug-callback-url">Loading...</span>
                                </div>
                                <div class="debug-item">
                                    <span class="debug-label">Referrer:</span>
                                    <span class="debug-value" id="debug-referrer">Loading...</span>
                                </div>
                                <div class="debug-item">
                                    <span class="debug-label">User Agent:</span>
                                    <span class="debug-value" id="debug-user-agent">Loading...</span>
                                </div>
                            </div>

                            <div class="debug-section">
                                <h4>⏰ Server Logs (Last 5 minutes)</h4>
                                <div id="debug-server-logs" class="debug-logs">
                                    <div class="debug-log-entry">Loading server logs...</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                </div>
            </div>
        </main>


        <script is:inline define:vars={{ code, state, error, statusType }}>
            // デバッグ情報の初期化
            initializeDebugInfo();
            
            // モバイルアプリへのリダイレクト処理（即座に実行）
            if (statusType === 'success' && code) {
                const redirectUrl = `moodesky://oauth/callback?code=${encodeURIComponent(code)}${state ? `&state=${encodeURIComponent(state)}` : ''}`;
                
                console.log('🔄 OAuth Callback: Redirecting to app with code');
                console.log('🔄 Redirect URL scheme: moodesky://oauth/callback');
                console.log('🔄 Code received: [REDACTED FOR SECURITY]');
                console.log('🔄 State received:', state);
                
                // 即座にモバイルアプリへのリダイレクトを実行
                try {
                    window.location.href = redirectUrl;
                } catch (e) {
                    console.error('❌ Failed to redirect to app:', e);
                    
                    // フォールバック: リンクを作成してクリック
                    const link = document.createElement('a');
                    link.href = redirectUrl;
                    link.click();
                }
                
                // フォールバック: 3秒後にWebページを閉じる（デスクトップブラウザ対応）
                setTimeout(() => {
                    try {
                        if (window.opener) {
                            // ポップアップウィンドウの場合
                            window.close();
                        } else {
                            // 通常のウィンドウの場合、履歴を戻る
                            window.history.back();
                        }
                    } catch (e) {
                        console.log('Window operation failed:', e);
                        // Last resort: prompt manual operation
                        document.querySelector('.redirect-message').innerHTML = 
                            'If the app does not open, please close the browser tab and open the app manually.';
                    }
                }, 3000);
            }

            // デバッグ情報表示の関数群
            function toggleDebugInfo() {
                const debugPanel = document.getElementById('debug-panel');
                const button = document.querySelector('.debug-corner-button');
                const debugText = button.querySelector('.debug-text');
                
                if (debugPanel.style.display === 'none' || debugPanel.style.display === '') {
                    debugPanel.style.display = 'block';
                    debugText.textContent = 'Hide';
                    button.title = 'Hide technical details';
                    loadServerLogs();
                } else {
                    debugPanel.style.display = 'none';
                    debugText.textContent = 'Debug';
                    button.title = 'Show technical details';
                }
            }

            function initializeDebugInfo() {
                // ネットワーク情報の取得
                setTimeout(() => {
                    const callbackUrlElement = document.getElementById('debug-callback-url');
                    const referrerElement = document.getElementById('debug-referrer');
                    const userAgentElement = document.getElementById('debug-user-agent');
                    
                    if (callbackUrlElement) {
                        callbackUrlElement.textContent = 
                            window.location.href.replace(/code=[^&]+/g, 'code=[REDACTED]');
                    }
                    if (referrerElement) {
                        referrerElement.textContent = document.referrer || 'None';
                    }
                    if (userAgentElement) {
                        userAgentElement.textContent = 
                            navigator.userAgent.substring(0, 100) + '...';
                    }
                }, 100);
            }

            function loadServerLogs() {
                const logsContainer = document.getElementById('debug-server-logs');
                logsContainer.innerHTML = '<div class="debug-log-entry">Loading...</div>';

                // サーバーログの取得
                fetch('/api/moodesky/oauth/debug-logs')
                    .then(response => response.json())
                    .then(data => {
                        if (data.logs && data.logs.length > 0) {
                            logsContainer.innerHTML = '';
                            data.logs.forEach(log => {
                                const logEntry = document.createElement('div');
                                logEntry.className = `debug-log-entry log-${log.level || 'info'}`;
                                logEntry.innerHTML = `
                                    <span class="log-timestamp">[${log.timestamp}]</span>
                                    <span class="log-level">${log.level?.toUpperCase() || 'INFO'}</span>
                                    <span class="log-message">${log.message}</span>
                                `;
                                logsContainer.appendChild(logEntry);
                            });
                        } else {
                            logsContainer.innerHTML = '<div class="debug-log-entry">No recent logs found</div>';
                        }
                    })
                    .catch(error => {
                        logsContainer.innerHTML = '<div class="debug-log-entry log-error">Failed to load server logs</div>';
                    });
            }
        </script>
    </body>
</html>

<style>
    .oauth-callback-main {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem;
        background-color: var(--bg1);
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
    }

    .oauth-callback-container {
        width: 100%;
        max-width: 500px;
    }

    .oauth-callback-card {
        background: var(--bg2);
        border-radius: 16px;
        padding: 3rem 2rem;
        text-align: center;
        box-shadow: 1px 1px 4px var(--shadow1);
        border: 1px solid var(--border1);
        max-width: 500px;
        width: 100%;
    }

    .oauth-callback-icon {
        margin-bottom: 2rem;
    }

    .oauth-callback-icon i {
        font-size: 4rem;
        display: block;
    }

    .success-icon {
        color: var(--accent1);
        animation: pulse 2s infinite;
    }

    .error-icon {
        color: #f44336;
    }

    .loading-icon {
        color: var(--accent1);
        animation: spin 2s linear infinite;
    }

    .oauth-callback-title {
        font-size: 1.75rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
        color: var(--accent7);
    }

    .oauth-callback-message {
        margin-bottom: 2rem;
    }

    .oauth-callback-message p {
        font-size: 1.125rem;
        margin: 0;
        line-height: 1.6;
    }

    .oauth-callback-message.success {
        color: var(--accent3);
    }

    .oauth-callback-message.error {
        color: #f44336;
    }

    .oauth-callback-message.loading {
        color: var(--accent1);
    }

    .oauth-callback-details {
        background: var(--bg3);
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1.5rem;
        border: 1px solid var(--border2);
    }

    .redirect-message {
        font-size: 0.875rem;
        color: var(--accent4);
        margin: 0;
    }

    .oauth-callback-actions {
        display: flex;
        justify-content: center;
        gap: 1rem;
    }

    .retry-button {
        background: var(--accent1);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.75rem 2rem;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .retry-button:hover {
        background: var(--accent3);
    }

    .debug-corner {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 1000;
    }

    .debug-corner-button {
        background: rgba(52, 73, 94, 0.8);
        color: white;
        border: none;
        border-radius: 20px;
        padding: 8px 12px;
        font-size: 0.8rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        backdrop-filter: blur(10px);
        display: flex;
        align-items: center;
        gap: 4px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
        opacity: 0.7;
    }

    .debug-corner-button:hover {
        background: rgba(52, 73, 94, 0.95);
        opacity: 1;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    }

    .debug-icon {
        font-size: 0.9em;
    }

    .debug-text {
        font-size: 0.75rem;
    }

    .debug-panel {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.8);
        z-index: 1001;
        overflow-y: auto;
        padding: 20px;
    }

    .debug-content {
        max-width: 900px;
        margin: 0 auto;
        background: var(--bg2);
        border: 1px solid var(--border2);
        border-radius: 12px;
        padding: 2rem;
        font-family: 'Monaco', 'Menlo', 'Consolas', monospace;
        font-size: 0.875rem;
        position: relative;
    }

    .debug-close {
        position: absolute;
        top: 15px;
        right: 20px;
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        color: var(--accent4);
        padding: 5px;
        border-radius: 50%;
        width: 35px;
        height: 35px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .debug-close:hover {
        background: var(--bg3);
        color: var(--accent1);
    }

    .debug-header h3 {
        margin: 0 0 0.5rem 0;
        color: var(--accent1);
        font-size: 1.25rem;
    }

    .debug-header p {
        margin: 0 0 1.5rem 0;
        color: var(--accent4);
        font-size: 0.875rem;
    }

    .debug-section {
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid var(--border1);
    }

    .debug-section:last-child {
        border-bottom: none;
        margin-bottom: 0;
    }

    .debug-section h4 {
        margin: 0 0 1rem 0;
        color: var(--accent2);
        font-size: 1rem;
    }

    .debug-item {
        display: flex;
        margin-bottom: 0.5rem;
        align-items: flex-start;
    }

    .debug-label {
        font-weight: 600;
        color: var(--accent3);
        min-width: 180px;
        margin-right: 1rem;
    }

    .debug-value {
        flex: 1;
        color: var(--accent6);
        word-break: break-all;
    }

    .debug-logs {
        max-height: 200px;
        overflow-y: auto;
        background: var(--bg1);
        border: 1px solid var(--border1);
        border-radius: 4px;
        padding: 0.75rem;
    }

    .debug-log-entry {
        margin-bottom: 0.5rem;
        padding: 0.25rem 0;
        font-size: 0.8rem;
        line-height: 1.4;
    }

    .debug-log-entry:last-child {
        margin-bottom: 0;
    }

    .log-timestamp {
        color: var(--accent4);
        margin-right: 0.5rem;
    }

    .log-level {
        font-weight: 600;
        margin-right: 0.5rem;
        padding: 0.1rem 0.3rem;
        border-radius: 3px;
        font-size: 0.7rem;
    }

    .log-info .log-level {
        background: #3498db;
        color: white;
    }

    .log-success .log-level {
        background: #2ecc71;
        color: white;
    }

    .log-warning .log-level {
        background: #f39c12;
        color: white;
    }

    .log-error .log-level {
        background: #e74c3c;
        color: white;
    }

    .log-message {
        color: var(--accent6);
    }

    @keyframes pulse {
        0%, 100% {
            opacity: 1;
        }
        50% {
            opacity: 0.5;
        }
    }

    @keyframes spin {
        from {
            transform: rotate(0deg);
        }
        to {
            transform: rotate(360deg);
        }
    }

    @media (max-width: 640px) {
        .oauth-callback-main {
            padding: 1rem;
        }

        .oauth-callback-card {
            padding: 2rem 1.5rem;
        }

        .oauth-callback-title {
            font-size: 1.5rem;
        }

        .oauth-callback-icon i {
            font-size: 3rem;
        }
    }

    @media (max-width: 480px) {
        .oauth-callback-card {
            padding: 1.5rem 1rem;
        }

        .oauth-callback-title {
            font-size: 1.25rem;
        }
    }
</style>