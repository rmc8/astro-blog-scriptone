---
/**
 * moodeSKy OAuth Callback Page
 * 
 * AT Protocol OAuth 2.0 + DPoPË™çË®º„Ç≥„Éº„É´„Éê„ÉÉ„ÇØÂá¶ÁêÜ
 * RAG„Åã„ÇâÂæó„ÅüÂÖ¨Âºèatproto.dartÂÆüË£Ö„Éë„Çø„Éº„É≥„Å´Ê∫ñÊã†
 * 
 * @see https://atproto.com/specs/oauth#redirect-based-flow
 * @see https://github.com/myConsciousness/atproto.dart/tree/main/packages/atproto_oauth
 */
import SEOHead from "@/components/seo/SEOHead.astro";

// OAuth 2.0Ê®ôÊ∫ñ„ÇØ„Ç®„É™„Éë„É©„É°„Éº„Çø„ÇíÂèñÂæó
const url = new URL(Astro.request.url);
const code = url.searchParams.get('code');        // Ë™çË®º„Ç≥„Éº„Éâ
const state = url.searchParams.get('state');      // CSRF‰øùË≠∑Áî®
const error = url.searchParams.get('error');      // „Ç®„É©„ÉºÁ®ÆÈ°û
const error_description = url.searchParams.get('error_description'); // „Ç®„É©„ÉºË©≥Á¥∞

// Error handling
let statusMessage = '';
let statusType: 'success' | 'error' | 'loading' = 'loading';

if (error) {
    statusType = 'error';
    statusMessage = error_description || `Authentication error: ${error}`;
} else if (code) {
    statusType = 'success';
    statusMessage = 'Authentication completed. Redirecting to app...';
} else {
    statusType = 'error';
    statusMessage = 'Authentication code not found.';
}
---

<!doctype html>
<html lang="en">
    <head>
        <SEOHead
            title="moodeSky OAuth Authentication"
            description="moodeSky OAuth Authentication Callback"
            url="/moodesky/oauth/callback"
            type="website"
        />
    </head>

    <body>
        
        <main class="oauth-callback-main">
            <div class="oauth-callback-container">
                <div class="oauth-callback-card">
                    <div class="oauth-callback-icon">
                        {statusType === 'success' && <i class="material-icons success-icon">check_circle</i>}
                        {statusType === 'error' && <i class="material-icons error-icon">error</i>}
                        {statusType === 'loading' && <i class="material-icons loading-icon">hourglass_empty</i>}
                    </div>
                    
                    <h1 class="oauth-callback-title">moodeSky OAuth Authentication</h1>
                    
                    <div class={`oauth-callback-message ${statusType}`}>
                        <p>{statusMessage}</p>
                    </div>

                    {statusType === 'success' && (
                        <div class="oauth-callback-details">
                            <p class="redirect-message">
                                If the app doesn't open automatically, please open the app manually.
                            </p>
                        </div>
                    )}

                    {statusType === 'error' && (
                        <div class="oauth-callback-actions">
                            <button class="retry-button" onclick="window.history.back()">
                                Go Back
                            </button>
                        </div>
                    )}

                    <!-- Êéß„Åà„ÇÅ„Å™„Éá„Éê„ÉÉ„Ç∞„Éú„Çø„É≥Ôºà„Ç®„É©„ÉºÊôÇ„ÅÆ„ÅøË°®Á§∫Ôºâ -->
                    {statusType === 'error' && (
                        <div class="debug-corner">
                            <button class="debug-corner-button" onclick="window.toggleDebugInfo()" title="Show technical details">
                                <span class="debug-icon">üîç</span>
                                <span class="debug-text">Debug</span>
                            </button>
                        </div>
                    )}

                    <!-- „Ç®„É©„ÉºÊôÇ„Å´Áõ¥Êé•„É≠„Ç∞Ë°®Á§∫ -->
                    {statusType === 'error' && (
                        <div class="debug-logs-inline">
                            <h4>üîç Debug Information</h4>
                            <div class="debug-simple">
                                <div><strong>Error:</strong> {error || 'Unknown'}</div>
                                <div><strong>Description:</strong> {error_description || 'No description'}</div>
                                <div><strong>Has Code:</strong> {code ? 'Yes' : 'No'}</div>
                                <div><strong>Has State:</strong> {state ? 'Yes' : 'No'}</div>
                                <div><strong>Callback URL:</strong> <span id="simple-url">Loading...</span></div>
                                <div><strong>Referrer:</strong> <span id="simple-referrer">Loading...</span></div>
                            </div>
                            <div id="server-logs-simple" class="debug-logs-simple">
                                <strong>Server Logs:</strong>
                                <div id="logs-content">Loading...</div>
                            </div>
                        </div>
                    )}

                    <!-- „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„Éë„Éç„É´ -->
                    <div id="debug-panel" class="debug-panel" style="display: none;">
                        <div class="debug-content">
                            <button class="debug-close" onclick="toggleDebugInfo()" title="Close debug panel">√ó</button>
                            <div class="debug-header">
                                <h3>üîç OAuth Debug Information</h3>
                                <p>Ë™çË®º„Éó„É≠„Çª„Çπ„ÅÆË©≥Á¥∞ÊÉÖÂ†±Ôºà„Çª„Ç≠„É•„É™„ÉÜ„Ç£ÊÉÖÂ†±„ÅØÈô§Â§ñÔºâ</p>
                            </div>
                            <div class="debug-section">
                                <h4>üìã Request Parameters</h4>
                                <div class="debug-item">
                                    <span class="debug-label">Error Type:</span>
                                    <span class="debug-value" id="debug-error-type">{error || 'None'}</span>
                                </div>
                                <div class="debug-item">
                                    <span class="debug-label">Error Description:</span>
                                    <span class="debug-value" id="debug-error-desc">{error_description || 'None'}</span>
                                </div>
                                <div class="debug-item">
                                    <span class="debug-label">Has Authorization Code:</span>
                                    <span class="debug-value" id="debug-has-code">{code ? 'Yes' : 'No'}</span>
                                </div>
                                <div class="debug-item">
                                    <span class="debug-label">Has State Parameter:</span>
                                    <span class="debug-value" id="debug-has-state">{state ? 'Yes' : 'No'}</span>
                                </div>
                            </div>
                            
                            <div class="debug-section">
                                <h4>üåê Network Information</h4>
                                <div class="debug-item">
                                    <span class="debug-label">Callback URL:</span>
                                    <span class="debug-value" id="debug-callback-url">Loading...</span>
                                </div>
                                <div class="debug-item">
                                    <span class="debug-label">Referrer:</span>
                                    <span class="debug-value" id="debug-referrer">Loading...</span>
                                </div>
                                <div class="debug-item">
                                    <span class="debug-label">User Agent:</span>
                                    <span class="debug-value" id="debug-user-agent">Loading...</span>
                                </div>
                            </div>

                            <div class="debug-section">
                                <h4>‚è∞ Server Logs (Last 5 minutes)</h4>
                                <div id="debug-server-logs" class="debug-logs">
                                    <div class="debug-log-entry">Loading server logs...</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                </div>
            </div>
        </main>


        <script is:inline define:vars={{ code, state, error, statusType }}>
            // „Ç∞„É≠„Éº„Éê„É´Èñ¢Êï∞„Å®„Åó„Å¶ÂÆöÁæ©
            window.toggleDebugInfo = function() {
                const debugPanel = document.getElementById('debug-panel');
                const button = document.querySelector('.debug-corner-button');
                const debugText = button ? button.querySelector('.debug-text') : null;
                
                console.log('Debug button clicked', debugPanel, button);
                
                if (debugPanel) {
                    if (debugPanel.style.display === 'none' || debugPanel.style.display === '') {
                        debugPanel.style.display = 'block';
                        if (debugText) debugText.textContent = 'Hide';
                        if (button) button.title = 'Hide technical details';
                        loadServerLogs();
                        console.log('Debug panel opened');
                    } else {
                        debugPanel.style.display = 'none';
                        if (debugText) debugText.textContent = 'Debug';
                        if (button) button.title = 'Show technical details';
                        console.log('Debug panel closed');
                    }
                }
            };

            window.loadServerLogs = function() {
                const logsContainer = document.getElementById('debug-server-logs');
                if (!logsContainer) return;
                
                logsContainer.innerHTML = '<div class="debug-log-entry">Loading...</div>';

                // „Çµ„Éº„Éê„Éº„É≠„Ç∞„ÅÆÂèñÂæó
                fetch('/api/moodesky/oauth/debug-logs')
                    .then(response => response.json())
                    .then(data => {
                        console.log('Server logs loaded:', data);
                        if (data.logs && data.logs.length > 0) {
                            logsContainer.innerHTML = '';
                            data.logs.forEach(log => {
                                const logEntry = document.createElement('div');
                                logEntry.className = `debug-log-entry log-${log.level || 'info'}`;
                                logEntry.innerHTML = `
                                    <span class="log-timestamp">[${log.timestamp}]</span>
                                    <span class="log-level">${log.level?.toUpperCase() || 'INFO'}</span>
                                    <span class="log-message">${log.message}</span>
                                `;
                                logsContainer.appendChild(logEntry);
                            });
                        } else {
                            logsContainer.innerHTML = '<div class="debug-log-entry">No recent logs found</div>';
                        }
                    })
                    .catch(error => {
                        console.error('Failed to load server logs:', error);
                        logsContainer.innerHTML = '<div class="debug-log-entry log-error">Failed to load server logs</div>';
                    });
            };

            // „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÅÆÂàùÊúüÂåñ
            setTimeout(function() {
                initializeDebugInfo();
                // „Ç®„É©„ÉºÊôÇ„ÅØËá™ÂãïÁöÑ„Å´„Çµ„Éº„Éê„Éº„É≠„Ç∞„ÇíË™≠„ÅøËæº„Åø
                if (statusType === 'error') {
                    loadSimpleLogs();
                }
            }, 100);

            function loadSimpleLogs() {
                const logsContent = document.getElementById('logs-content');
                if (!logsContent) return;
                
                logsContent.innerHTML = 'Loading server logs...';
                
                fetch('/api/moodesky/oauth/debug-logs')
                    .then(response => response.json())
                    .then(data => {
                        console.log('Simple logs loaded:', data);
                        if (data.logs && data.logs.length > 0) {
                            logsContent.innerHTML = '';
                            data.logs.slice(-10).forEach(log => { // ÊúÄÊñ∞10‰ª∂„ÅÆ„Åø
                                const logDiv = document.createElement('div');
                                logDiv.className = 'log-entry';
                                logDiv.innerHTML = `
                                    <span class="log-timestamp">[${new Date(log.timestamp).toLocaleTimeString()}]</span>
                                    <span class="log-level">${log.level?.toUpperCase() || 'INFO'}:</span>
                                    <span class="log-message">${log.message}</span>
                                `;
                                logsContent.appendChild(logDiv);
                            });
                        } else {
                            logsContent.innerHTML = 'No recent server logs found';
                        }
                    })
                    .catch(error => {
                        console.error('Failed to load simple logs:', error);
                        logsContent.innerHTML = 'Failed to load server logs';
                    });
            }
            
            // „É¢„Éê„Ç§„É´„Ç¢„Éó„É™„Å∏„ÅÆ„É™„ÉÄ„Ç§„É¨„ÇØ„ÉàÂá¶ÁêÜÔºàÂç≥Â∫ß„Å´ÂÆüË°åÔºâ
            if (statusType === 'success' && code) {
                const redirectUrl = `moodesky://oauth/callback?code=${encodeURIComponent(code)}${state ? `&state=${encodeURIComponent(state)}` : ''}`;
                
                console.log('üîÑ OAuth Callback: Redirecting to app with code');
                console.log('üîÑ Redirect URL scheme: moodesky://oauth/callback');
                console.log('üîÑ Code received: [REDACTED FOR SECURITY]');
                console.log('üîÑ State received:', state);
                
                // Âç≥Â∫ß„Å´„É¢„Éê„Ç§„É´„Ç¢„Éó„É™„Å∏„ÅÆ„É™„ÉÄ„Ç§„É¨„ÇØ„Éà„ÇíÂÆüË°å
                try {
                    window.location.href = redirectUrl;
                } catch (e) {
                    console.error('‚ùå Failed to redirect to app:', e);
                    
                    // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: „É™„É≥„ÇØ„Çí‰ΩúÊàê„Åó„Å¶„ÇØ„É™„ÉÉ„ÇØ
                    const link = document.createElement('a');
                    link.href = redirectUrl;
                    link.click();
                }
                
                // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: 3ÁßíÂæå„Å´Web„Éö„Éº„Ç∏„ÇíÈñâ„Åò„ÇãÔºà„Éá„Çπ„ÇØ„Éà„ÉÉ„Éó„Éñ„É©„Ç¶„Ç∂ÂØæÂøúÔºâ
                setTimeout(() => {
                    try {
                        if (window.opener) {
                            // „Éù„ÉÉ„Éó„Ç¢„ÉÉ„Éó„Ç¶„Ç£„É≥„Éâ„Ç¶„ÅÆÂ†¥Âêà
                            window.close();
                        } else {
                            // ÈÄöÂ∏∏„ÅÆ„Ç¶„Ç£„É≥„Éâ„Ç¶„ÅÆÂ†¥Âêà„ÄÅÂ±•Ê≠¥„ÇíÊàª„Çã
                            window.history.back();
                        }
                    } catch (e) {
                        console.log('Window operation failed:', e);
                        // Last resort: prompt manual operation
                        document.querySelector('.redirect-message').innerHTML = 
                            'If the app does not open, please close the browser tab and open the app manually.';
                    }
                }, 3000);
            }

            function initializeDebugInfo() {
                // Ë©≥Á¥∞„Éá„Éê„ÉÉ„Ç∞„Éë„Éç„É´Áî®
                const callbackUrlElement = document.getElementById('debug-callback-url');
                const referrerElement = document.getElementById('debug-referrer');
                const userAgentElement = document.getElementById('debug-user-agent');
                
                if (callbackUrlElement) {
                    callbackUrlElement.textContent = 
                        window.location.href.replace(/code=[^&]+/g, 'code=[REDACTED]');
                }
                if (referrerElement) {
                    referrerElement.textContent = document.referrer || 'None';
                }
                if (userAgentElement) {
                    userAgentElement.textContent = 
                        navigator.userAgent.substring(0, 100) + '...';
                }
                
                // „Ç∑„É≥„Éó„É´Ë°®Á§∫Áî®
                const simpleUrlElement = document.getElementById('simple-url');
                const simpleReferrerElement = document.getElementById('simple-referrer');
                
                if (simpleUrlElement) {
                    simpleUrlElement.textContent = 
                        window.location.href.replace(/code=[^&]+/g, 'code=[REDACTED]');
                }
                if (simpleReferrerElement) {
                    simpleReferrerElement.textContent = document.referrer || 'None';
                }
                
                console.log('Debug info initialized');
            }
        </script>
    </body>
</html>

<style>
    .oauth-callback-main {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem;
        background-color: var(--bg1);
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
    }

    .oauth-callback-container {
        width: 100%;
        max-width: 500px;
    }

    .oauth-callback-card {
        background: var(--bg2);
        border-radius: 16px;
        padding: 3rem 2rem;
        text-align: center;
        box-shadow: 1px 1px 4px var(--shadow1);
        border: 1px solid var(--border1);
        max-width: 500px;
        width: 100%;
    }

    .oauth-callback-icon {
        margin-bottom: 2rem;
    }

    .oauth-callback-icon i {
        font-size: 4rem;
        display: block;
    }

    .success-icon {
        color: var(--accent1);
        animation: pulse 2s infinite;
    }

    .error-icon {
        color: #f44336;
    }

    .loading-icon {
        color: var(--accent1);
        animation: spin 2s linear infinite;
    }

    .oauth-callback-title {
        font-size: 1.75rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
        color: var(--accent7);
    }

    .oauth-callback-message {
        margin-bottom: 2rem;
    }

    .oauth-callback-message p {
        font-size: 1.125rem;
        margin: 0;
        line-height: 1.6;
    }

    .oauth-callback-message.success {
        color: var(--accent3);
    }

    .oauth-callback-message.error {
        color: #f44336;
    }

    .oauth-callback-message.loading {
        color: var(--accent1);
    }

    .oauth-callback-details {
        background: var(--bg3);
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1.5rem;
        border: 1px solid var(--border2);
    }

    .redirect-message {
        font-size: 0.875rem;
        color: var(--accent4);
        margin: 0;
    }

    .oauth-callback-actions {
        display: flex;
        justify-content: center;
        gap: 1rem;
    }

    .retry-button {
        background: var(--accent1);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.75rem 2rem;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .retry-button:hover {
        background: var(--accent3);
    }

    .debug-corner {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 1000;
    }

    .debug-corner-button {
        background: rgba(52, 73, 94, 0.8);
        color: white;
        border: none;
        border-radius: 20px;
        padding: 8px 12px;
        font-size: 0.8rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        backdrop-filter: blur(10px);
        display: flex;
        align-items: center;
        gap: 4px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
        opacity: 0.7;
    }

    .debug-corner-button:hover {
        background: rgba(52, 73, 94, 0.95);
        opacity: 1;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    }

    .debug-icon {
        font-size: 0.9em;
    }

    .debug-text {
        font-size: 0.75rem;
    }

    .debug-panel {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.8);
        z-index: 1001;
        overflow-y: auto;
        padding: 20px;
    }

    .debug-content {
        max-width: 900px;
        margin: 0 auto;
        background: var(--bg2);
        border: 1px solid var(--border2);
        border-radius: 12px;
        padding: 2rem;
        font-family: 'Monaco', 'Menlo', 'Consolas', monospace;
        font-size: 0.875rem;
        position: relative;
    }

    .debug-close {
        position: absolute;
        top: 15px;
        right: 20px;
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        color: var(--accent4);
        padding: 5px;
        border-radius: 50%;
        width: 35px;
        height: 35px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .debug-close:hover {
        background: var(--bg3);
        color: var(--accent1);
    }

    .debug-header h3 {
        margin: 0 0 0.5rem 0;
        color: var(--accent1);
        font-size: 1.25rem;
    }

    .debug-header p {
        margin: 0 0 1.5rem 0;
        color: var(--accent4);
        font-size: 0.875rem;
    }

    .debug-section {
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid var(--border1);
    }

    .debug-section:last-child {
        border-bottom: none;
        margin-bottom: 0;
    }

    .debug-section h4 {
        margin: 0 0 1rem 0;
        color: var(--accent2);
        font-size: 1rem;
    }

    .debug-item {
        display: flex;
        margin-bottom: 0.5rem;
        align-items: flex-start;
    }

    .debug-label {
        font-weight: 600;
        color: var(--accent3);
        min-width: 180px;
        margin-right: 1rem;
    }

    .debug-value {
        flex: 1;
        color: var(--accent6);
        word-break: break-all;
    }

    .debug-logs {
        max-height: 200px;
        overflow-y: auto;
        background: var(--bg1);
        border: 1px solid var(--border1);
        border-radius: 4px;
        padding: 0.75rem;
    }

    .debug-log-entry {
        margin-bottom: 0.5rem;
        padding: 0.25rem 0;
        font-size: 0.8rem;
        line-height: 1.4;
    }

    .debug-log-entry:last-child {
        margin-bottom: 0;
    }

    .log-timestamp {
        color: var(--accent4);
        margin-right: 0.5rem;
    }

    .log-level {
        font-weight: 600;
        margin-right: 0.5rem;
        padding: 0.1rem 0.3rem;
        border-radius: 3px;
        font-size: 0.7rem;
    }

    .log-info .log-level {
        background: #3498db;
        color: white;
    }

    .log-success .log-level {
        background: #2ecc71;
        color: white;
    }

    .log-warning .log-level {
        background: #f39c12;
        color: white;
    }

    .log-error .log-level {
        background: #e74c3c;
        color: white;
    }

    .log-message {
        color: var(--accent6);
    }

    .debug-logs-inline {
        margin-top: 2rem;
        padding: 1.5rem;
        background: var(--bg3);
        border: 1px solid var(--border2);
        border-radius: 8px;
        font-family: 'Monaco', 'Menlo', 'Consolas', monospace;
        font-size: 0.8rem;
    }

    .debug-logs-inline h4 {
        margin: 0 0 1rem 0;
        color: var(--accent1);
        font-size: 1rem;
    }

    .debug-simple div {
        margin-bottom: 0.5rem;
        line-height: 1.4;
    }

    .debug-simple strong {
        color: var(--accent3);
        margin-right: 0.5rem;
    }

    .debug-logs-simple {
        margin-top: 1rem;
        padding-top: 1rem;
        border-top: 1px solid var(--border1);
    }

    .debug-logs-simple #logs-content {
        margin-top: 0.5rem;
        max-height: 150px;
        overflow-y: auto;
        background: var(--bg1);
        padding: 0.5rem;
        border-radius: 4px;
        border: 1px solid var(--border1);
    }

    .debug-logs-simple .log-entry {
        margin-bottom: 0.3rem;
        font-size: 0.75rem;
        line-height: 1.3;
    }

    .debug-logs-simple .log-timestamp {
        color: var(--accent4);
        margin-right: 0.3rem;
    }

    .debug-logs-simple .log-level {
        font-weight: bold;
        margin-right: 0.3rem;
    }

    .debug-logs-simple .log-message {
        color: var(--accent6);
    }

    @keyframes pulse {
        0%, 100% {
            opacity: 1;
        }
        50% {
            opacity: 0.5;
        }
    }

    @keyframes spin {
        from {
            transform: rotate(0deg);
        }
        to {
            transform: rotate(360deg);
        }
    }

    @media (max-width: 640px) {
        .oauth-callback-main {
            padding: 1rem;
        }

        .oauth-callback-card {
            padding: 2rem 1.5rem;
        }

        .oauth-callback-title {
            font-size: 1.5rem;
        }

        .oauth-callback-icon i {
            font-size: 3rem;
        }
    }

    @media (max-width: 480px) {
        .oauth-callback-card {
            padding: 1.5rem 1rem;
        }

        .oauth-callback-title {
            font-size: 1.25rem;
        }
    }
</style>