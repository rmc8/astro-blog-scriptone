---
import type { SEOProps } from '@/lib/seo';
import { generateSEOProps, generateHreflangLinks } from '@/lib/seo';
import StructuredData from './StructuredData.astro';
import type { ArticleStructuredData, WebsiteStructuredData, BreadcrumbStructuredData } from './StructuredData.astro';

interface Props extends SEOProps {
  structuredData?: ArticleStructuredData | WebsiteStructuredData | BreadcrumbStructuredData | Array<ArticleStructuredData | WebsiteStructuredData | BreadcrumbStructuredData>;
  breadcrumbItems?: Array<{ name: string; url?: string; position: number }>;
}

const seoData = generateSEOProps(Astro.props);
const hreflangLinks = generateHreflangLinks(seoData.alternateLocales);

// 構造化データの生成
const structuredDataArray: Array<ArticleStructuredData | WebsiteStructuredData | BreadcrumbStructuredData> = [];

// 明示的に渡された構造化データ
if (Astro.props.structuredData) {
  if (Array.isArray(Astro.props.structuredData)) {
    structuredDataArray.push(...Astro.props.structuredData);
  } else {
    structuredDataArray.push(Astro.props.structuredData);
  }
}

// 記事の場合は自動で記事の構造化データを生成
if (seoData.openGraph.type === 'article' && seoData.article) {
  const articleData: ArticleStructuredData = {
    type: 'article',
    title: Astro.props.title,
    description: Astro.props.description,
    url: Astro.props.url,
    image: seoData.openGraph.image,
    datePublished: seoData.article.publishedTime || new Date().toISOString(),
    dateModified: seoData.article.modifiedTime,
    author: seoData.article.author || 'Scriptone',
    publisher: 'Scriptone',
    categories: seoData.article.section ? [seoData.article.section] : undefined,
    tags: seoData.article.tags,
    locale: Astro.props.locale || 'ja'
  };
  
  // 重複チェック
  const hasArticleData = structuredDataArray.some(data => data.type === 'article');
  if (!hasArticleData) {
    structuredDataArray.push(articleData);
  }
}

// パンくずリストの構造化データ
if (Astro.props.breadcrumbItems && Astro.props.breadcrumbItems.length > 0) {
  const breadcrumbData: BreadcrumbStructuredData = {
    type: 'breadcrumb',
    items: Astro.props.breadcrumbItems
  };
  structuredDataArray.push(breadcrumbData);
}
---

<!-- Basic Meta Tags -->
<title>{seoData.title}</title>
<meta name="description" content={seoData.description} />
<link rel="canonical" href={seoData.canonical} />

<!-- Open Graph -->
<meta property="og:type" content={seoData.openGraph.type} />
<meta property="og:title" content={seoData.openGraph.title} />
<meta property="og:description" content={seoData.openGraph.description} />
<meta property="og:url" content={seoData.openGraph.url} />
<meta property="og:image" content={seoData.openGraph.image} />
<meta property="og:site_name" content={seoData.openGraph.siteName} />
<meta property="og:locale" content={seoData.openGraph.locale} />

<!-- Twitter Card -->
<meta name="twitter:card" content={seoData.twitter.card} />
<meta name="twitter:title" content={seoData.twitter.title} />
<meta name="twitter:description" content={seoData.twitter.description} />
<meta name="twitter:image" content={seoData.twitter.image} />

<!-- Article Meta (if type is article) -->
{seoData.article && (
  <>
    {seoData.article.publishedTime && (
      <meta property="article:published_time" content={seoData.article.publishedTime} />
    )}
    {seoData.article.modifiedTime && (
      <meta property="article:modified_time" content={seoData.article.modifiedTime} />
    )}
    {seoData.article.author && (
      <meta property="article:author" content={seoData.article.author} />
    )}
    {seoData.article.section && (
      <meta property="article:section" content={seoData.article.section} />
    )}
    {seoData.article.tags && seoData.article.tags.map(tag => (
      <meta property="article:tag" content={tag} />
    ))}
  </>
)}

<!-- Hreflang Links -->
{hreflangLinks.map(link => (
  <link rel={link.rel} hreflang={link.hreflang} href={link.href} />
))}

<!-- Structured Data -->
{structuredDataArray.map((data) => (
  <StructuredData data={data} />
))}